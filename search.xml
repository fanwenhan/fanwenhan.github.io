<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[单点登录]]></title>
    <url>%2F2018%2F06%2F18%2F%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[写在最前 本篇为转载 作者：凌承一出处：http://www.cnblogs.com/ywlaker/ 一、单系统登录机制1、http无状态协议 web应用采用browser/server架构，http作为通信协议。http是无状态协议，浏览器的每一次请求，服务器会独立处理，不与之前或之后的请求产生关联，这个过程用下图说明，三次请求/响应对之间没有任何联系 但这也同时意味着，任何用户都能通过浏览器访问服务器资源，如果想保护服务器的某些资源，必须限制浏览器请求；要限制浏览器请求，必须鉴别浏览器请求，响应合法请求，忽略非法请求；要鉴别浏览器请求，必须清楚浏览器请求状态。既然http协议无状态，那就让服务器和浏览器共同维护一个状态吧！这就是会话机制 2、会话机制 浏览器第一次请求服务器，服务器创建一个会话，并将会话的id作为响应的一部分发送给浏览器，浏览器存储会话id，并在后续第二次和第三次请求中带上会话id，服务器取得请求中的会话id就知道是不是同一个用户了，这个过程用下图说明，后续请求与第一次请求产生了关联 服务器在内存中保存会话对象，浏览器怎么保存会话id呢？ 我们可能会想到两种方式 请求参数 cookie 将会话id作为每一个请求的参数，服务器接收请求自然能解析参数获得会话id，并借此判断是否来自同一会话，很明显，这种方式不靠谱。那就浏览器自己来维护这个会话id吧，每次发送http请求时浏览器自动发送会话id，cookie机制正好用来做这件事。cookie是浏览器用来存储少量数据的一种机制，数据以”key/value“形式存储，浏览器发送http请求时自动附带cookie信息 tomcat会话机制当然也实现了cookie，访问tomcat服务器时，浏览器中可以看到一个名为“JSESSIONID”的cookie，这就是tomcat会话机制维护的会话id，使用了cookie的请求响应过程如下图 3、登录状态 有了会话机制，登录状态就好明白了，我们假设浏览器第一次请求服务器需要输入用户名与密码验证身份，服务器拿到用户名密码去数据库比对，正确的话说明当前持有这个会话的用户是合法用户，应该将这个会话标记为“已授权”或者“已登录”等等之类的状态，既然是会话的状态，自然要保存在会话对象中，tomcat在会话对象中设置登录状态如下 12HttpSession session = request.getSession();session.setAttribute("isLogin", true); 用户再次访问时，tomcat在会话对象中查看登录状态 12HttpSession session = request.getSession();session.getAttribute("isLogin"); 实现了登录状态的浏览器请求服务器模型如下图描述 每次请求受保护资源时都会检查会话对象中的登录状态，只有 isLogin=true 的会话才能访问，登录机制因此而实现。 二、多系统的复杂性 web系统早已从久远的单系统发展成为如今由多系统组成的应用群，面对如此众多的系统，用户难道要一个一个登录、然后一个一个注销吗？就像下图描述的这样 ​ web系统由单系统发展成多系统组成的应用群，复杂性应该由系统内部承担，而不是用户。无论web系统内部多么复杂，对用户而言，都是一个统一的整体，也就是说，用户访问web系统的整个应用群与访问单个系统一样，登录/注销只要一次就够了 ​ 虽然单系统的登录解决方案很完美，但对于多系统应用群已经不再适用了，为什么呢？ 单系统登录解决方案的核心是cookie，cookie携带会话id在浏览器与服务器之间维护会话状态。但cookie是有限制的，这个限制就是cookie的域（通常对应网站的域名），浏览器发送http请求时会自动携带与该域匹配的cookie，而不是所有cookie ​ 既然这样，为什么不将web应用群中所有子系统的域名统一在一个顶级域名下，例如“baidu.com”，然后将它们的cookie域设置为“baidu.com”，这种做法理论上是可以的，甚至早期很多多系统登录就采用这种同域名共享cookie的方式。 然而，可行并不代表好，共享cookie的方式存在众多局限。 ​ 首先，应用群域名得统一； ​ 其次，应用群各系统使用的技术（至少是web服务器）要相同，不然cookie的key值（tomcat为JSESSIONID）不同，无法维持会话，共享cookie的方式是无法实现跨语言技术平台登录的，比如java、php、.net系统之间； ​ 第三，cookie本身不安全。 因此，我们需要一种全新的登录方式来实现多系统应用群的登录，这就是单点登录 三、单点登录 什么是单点登录？单点登录全称Single Sign On（以下简称SSO），是指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录与单点注销两部分 1、登录 相比于单系统登录，sso需要一个独立的认证中心，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。这个过程，也就是单点登录的原理，用下图说明 下面对上图简要描述 用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数 sso认证中心发现用户未登录，将用户引导至登录页面 用户输入用户名密码提交登录申请 sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌 sso认证中心带着令牌跳转会最初的请求地址（系统1） 系统1拿到令牌，去sso认证中心校验令牌是否有效 sso认证中心校验令牌，返回有效，注册系统1 系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源 用户访问系统2的受保护资源 系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数 sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌 系统2拿到令牌，去sso认证中心校验令牌是否有效 sso认证中心校验令牌，返回有效，注册系统2 系统2使用该令牌创建与用户的局部会话，返回受保护资源 用户登录成功之后，会与sso认证中心及各个子系统建立会话，用户与sso认证中心建立的会话称为全局会话，用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过sso认证中心，全局会话与局部会话有如下约束关系 ​ 1. 局部会话存在，全局会话一定存在 ​ 2. 全局会话存在，局部会话不一定存在 ​ 3. 全局会话销毁，局部会话必须销毁 我们可以通过百度、csdn、淘宝等网站的登录过程加深对单点登录的理解，注意观察登录过程中的跳转url与参数 2、注销 单点登录自然也要单点注销，在一个子系统中注销，所有子系统的会话都将被销毁，用下面的图来说明 sso认证中心一直监听全局会话的状态，一旦全局会话销毁，监听器将通知所有注册系统执行注销操作 下面对上图简要说明 用户向系统1发起注销请求 系统1根据用户与系统1建立的会话id拿到令牌，向sso认证中心发起注销请求 sso认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址 sso认证中心向所有注册系统发起注销请求 各注册系统接收sso认证中心的注销请求，销毁局部会话 sso认证中心引导用户至登录页面 ​ 四、部署图 单点登录涉及sso认证中心与众子系统，子系统与sso认证中心需要通信以交换令牌、校验令牌及发起注销请求，因而子系统必须集成sso的客户端，sso认证中心则是sso服务端，整个单点登录过程实质是sso客户端与服务端通信的过程，用下图描述 sso认证中心与sso客户端通信方式有多种，这里以简单好用的httpClient为例，web service、rpc、restful api都可以 五、实现 只是简要介绍下基于java的实现过程，不提供完整源码，明白了原理，我相信你们可以自己实现。sso采用客户端/服务端架构，我们先看sso-client与sso-server要实现的功能（下面：sso认证中心=sso-server） sso-client 拦截子系统未登录用户请求，跳转至sso认证中心 接收并存储sso认证中心发送的令牌 与sso-server通信，校验令牌的有效性 建立局部会话 拦截用户注销请求，向sso认证中心发送注销请求 接收sso认证中心发出的注销请求，销毁局部会话 sso-server 验证用户的登录信息 创建全局会话 创建授权令牌 与sso-client通信发送令牌 校验sso-client令牌有效性 系统注册 接收sso-client注销请求，注销所有会话 接下来，按照原理来实现sso！ 1、sso-client拦截未登录请求 java拦截请求的方式有servlet、filter、listener三种方式，我们采用filter。在sso-client中新建LoginFilter.java类并实现Filter接口，在doFilter()方法中加入对未登录用户的拦截 123456789101112public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; HttpServletRequest req = (HttpServletRequest) request; HttpServletResponse res = (HttpServletResponse) response; HttpSession session = req.getSession(); if (session.getAttribute("isLogin")) &#123; chain.doFilter(request, response); return; &#125; //跳转至sso认证中心 res.sendRedirect("sso-server-url-with-system-url");&#125; 2、sso-server拦截未登录请求 拦截从sso-client跳转至sso认证中心的未登录请求，跳转至登录页面，这个过程与sso-client完全一样 3、sso-server验证用户登录信息 用户在登录页面输入用户名密码，请求登录，sso认证中心校验用户信息，校验成功，将会话状态标记为“已登录” 123456@RequestMapping("/login")public String login(String username, String password, HttpServletRequest req) &#123; this.checkLoginInfo(username, password); req.getSession().setAttribute("isLogin", true); return "success";&#125; 4、sso-server创建授权令牌 授权令牌是一串随机字符，以什么样的方式生成都没有关系，只要不重复、不易伪造即可，下面是一个例子 1String token = UUID.randomUUID().toString(); 5、sso-client取得令牌并校验 sso认证中心登录后，跳转回子系统并附上令牌，子系统（sso-client）取得令牌，然后去sso认证中心校验，在LoginFilter.java的doFilter()中添加几行 1234567891011// 请求附带token参数String token = req.getParameter("token");if (token != null) &#123; // 去sso认证中心校验token boolean verifyResult = this.verify("sso-server-verify-url", token); if (!verifyResult) &#123; res.sendRedirect("sso-server-url"); return; &#125; chain.doFilter(request, response);&#125; ​ verify()方法使用httpClient实现，这里仅简略介绍，httpClient详细使用方法请参考官方文档 12HttpPost httpPost = new HttpPost("sso-server-verify-url-with-token");HttpResponse httpResponse = httpClient.execute(httpPost); 6、sso-server接收并处理校验令牌请求 用户在sso认证中心登录成功后，sso-server创建授权令牌并存储该令牌，所以，sso-server对令牌的校验就是去查找这个令牌是否存在以及是否过期，令牌校验成功后sso-server将发送校验请求的系统注册到sso认证中心（就是存储起来的意思） 令牌与注册系统地址通常存储在key-value数据库（如redis）中，redis可以为key设置有效时间也就是令牌的有效期。redis运行在内存中，速度非常快，正好sso-server不需要持久化任何数据。 令牌与注册系统地址可以用下图描述的结构存储在redis中，可能你会问，为什么要存储这些系统的地址？如果不存储，注销的时候就麻烦了，用户向sso认证中心提交注销请求，sso认证中心注销全局会话，但不知道哪些系统用此全局会话建立了自己的局部会话，也不知道要向哪些子系统发送注销请求注销局部会话 7、sso-client校验令牌成功创建局部会话 令牌校验成功后，sso-client将当前局部会话标记为“已登录”，修改LoginFilter.java，添加几行 123if (verifyResult) &#123; session.setAttribute("isLogin", true);&#125; ​ sso-client还需将当前会话id与令牌绑定，表示这个会话的登录状态与令牌相关，此关系可以用java的hashmap保存，保存的数据用来处理sso认证中心发来的注销请求 8、注销过程 用户向子系统发送带有“logout”参数的请求（注销请求），sso-client拦截器拦截该请求，向sso认证中心发起注销请求 1234String logout = req.getParameter("logout");if (logout != null) &#123; this.ssoServer.logout(token);&#125; ​ sso认证中心也用同样的方式识别出sso-client的请求是注销请求（带有“logout”参数），sso认证中心注销全局会话 1234567@RequestMapping("/logout")public String logout(HttpServletRequest req) &#123; HttpSession session = req.getSession(); if (session != null) &#123; session.invalidate();//触发LogoutListener &#125; return "redirect:/"; ​ sso认证中心有一个全局会话的监听器，一旦全局会话注销，将通知所有注册系统注销 12345678public class LogoutListener implements HttpSessionListener &#123; @Override public void sessionCreated(HttpSessionEvent event) &#123;&#125; @Override public void sessionDestroyed(HttpSessionEvent event) &#123; //通过httpClient向所有注册系统发送注销请求 &#125;&#125;]]></content>
      <categories>
        <category>技术</category>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>后端,分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法（冒泡排序）]]></title>
    <url>%2F2018%2F06%2F15%2F%E7%AE%97%E6%B3%95%EF%BC%88%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%89%2F</url>
    <content type="text"><![CDATA[内部排序算法：冒泡排序 基本思想将被排序的记录数组R[0..n-1]垂直排列，每个记录R[i]看作是重量为R[i].key的气泡。根据轻气泡不能在重气泡之下的原则，从下往上扫描数组R：凡扫描到违反本原则的轻气泡，就使其 向上”飘浮”。如此反复进行，直到最后任何两个气泡都是轻者在上，重者在下为止。 实现过程 初始状态： ​ R[0..n-1]为无序区。 ​ 第一趟扫描： ​ 从无序区底部向上依次比较相邻的两个气泡的重量，若发现轻者在下、重者 在上，则交换二者的位置，即依次比较(R[n-1], R[n-2])、(R[n-2], R[n-3])、…、(R[1], R[0])；对于每对气泡(R[j+1], R[j])，若R[j+1].key第一趟扫描完毕时，”最轻”的气泡就飘浮到该区间的顶部，即关键字最小的记录被放在最高位置R[0]上。 ​ 第二趟扫描：扫描R[1..n-1]。扫描完毕时，”次轻”的气泡飘浮到R[1]的位置上……最后，经过n-1趟扫描可得到有序区R[0..n-1]。 注意：第i趟扫描时，R[0..i-1]和R[i..n-1]分别为当前的有序区和无序区。扫描仍是从无序区底 部向上直至该区顶部。扫描完毕时，该区中最轻气泡飘浮到顶部位置R[i]上，结果是R[0..i]变为新的有序区。 代码第一种实现(没有优化)1234567891011121314151617181920/** * 冒泡排序的第一种实现, 没有任何优化 * @param a * @param n */public static void bubbleSort1(int [] a, int n)&#123; int i, j; for(i=0; i&lt;n; i++)&#123;//表示n次排序过程。 for(j=1; j&lt;n-i; j++)&#123; if(a[j-1] &gt; a[j])&#123;//前面的数字大于后面的数字就交换 //交换a[j-1]和a[j] int temp; temp = a[j-1]; a[j-1] = a[j]; a[j]=temp; &#125; &#125; &#125;&#125; 第二种实现12345678910111213141516171819202122232425/** * 设置一个标志，如果这一趟发生了交换，则为true，否则为false。明显如果有一趟没有发生交换，说明排序已经完成。 * @param a * @param n */public static void bubbleSort2(int [] a, int n)&#123; int j, k = n; boolean flag = true;//发生了交换就为true, 没发生就为false，第一次判断时必须标志位true。 while (flag)&#123; flag=false;//每次开始排序前，都设置flag为未排序过 for(j=1; j&lt;k; j++)&#123; if(a[j-1] &gt; a[j])&#123;//前面的数字大于后面的数字就交换 //交换a[j-1]和a[j] int temp; temp = a[j-1]; a[j-1] = a[j]; a[j]=temp; //表示交换过数据; flag = true; &#125; &#125; k--;//减小一次排序的尾边界 &#125;//end while&#125;]]></content>
      <categories>
        <category>算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>面试准备</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[集合概述]]></title>
    <url>%2F2018%2F06%2F15%2F%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[Collection(单列集合)List(有序,可重复)​ ArrayList 底层数据结构是数组,查询快,增删慢 线程不安全,效率高 Vector 底层数据结构是数组,查询快,增删慢 线程安全,效率低 LinkedList 底层数据结构是链表,查询慢,增删快 线程不安全,效率高 Set(无序,唯一)​ HashSet 底层数据结构是哈希表。 哈希表依赖两个方法：hashCode()和equals() 执行顺序： 首先判断hashCode()值是否相同 是：继续执行equals(),看其返回值 是true:说明元素重复，不添加 是false:就直接添加到集合 否：就直接添加到集合 最终： 自动生成hashCode()和equals()即可 ​ LinkedHashSet 底层数据结构由链表和哈希表组成。 由链表保证元素有序。 由哈希表保证元素唯一。 ​ TreeSet 底层数据结构是红黑树。(是一种自平衡的二叉树) 如何保证元素唯一性呢? 根据比较的返回值是否是0来决定 如何保证元素的排序呢? 两种方式 自然排序(元素具备比较性) 让元素所属的类实现Comparable接口 比较器排序(集合具备比较性) 让集合接收一个Comparator的实现类对象 Map(双列集合)​ A:Map集合的数据结构仅仅针对键有效，与值无关。 B:存储的是键值对形式的元素，键唯一，值可重复。 HashMap​ 底层数据结构是哈希表。线程不安全，效率高 哈希表依赖两个方法：hashCode()和equals() 执行顺序： 首先判断hashCode()值是否相同 是：继续执行equals(),看其返回值 是true:说明元素重复，不添加 是false:就直接添加到集合 否：就直接添加到集合 最终： 自动生成hashCode()和equals()即可 LinkedHashMap​ 底层数据结构由链表和哈希表组成。 由链表保证元素有序。 由哈希表保证元素唯一。 Hashtable​ 底层数据结构是哈希表。线程安全，效率低 哈希表依赖两个方法：hashCode()和equals() 执行顺序： 首先判断hashCode()值是否相同 是：继续执行equals(),看其返回值 是true:说明元素重复，不添加 是false:就直接添加到集合 否：就直接添加到集合 最终： 自动生成hashCode()和equals()即可 TreeMap​ 底层数据结构是红黑树。(是一种自平衡的二叉树) 如何保证元素唯一性呢? 根据比较的返回值是否是0来决定 如何保证元素的排序呢? 两种方式 自然排序(元素具备比较性) 让元素所属的类实现Comparable接口 比较器排序(集合具备比较性) 让集合接收一个Comparator的实现类对象]]></content>
      <categories>
        <category>技术</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>后端,集合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo回顾(一)]]></title>
    <url>%2F2018%2F06%2F12%2Fdubbo%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[dubbo出现dubbo为何出现先说说的一个小插曲 ​ 某公司前期项目使用的是垂直应用框架,即使用SpringMVC+spring+myBatis作为核心开发框架.后期网站的规模越来越大,单纯的几台服务器完全不能满足服务. 年轻的架构师经历了以下的心路历程: 当服务越来越多时，服务 URL 配置管理变得非常困难，F5 硬件负载均衡器的单点压力也越来越大。(架构师已经掉了半边头发~) ​ 当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，技术老大都不能完整的描述应用的架构关系。(架构师已经成了光头) ​ 接着，服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？(架构师拒绝回答该问题,选择宕机) 介绍完这个小小的前提提要,让我们看看dubbo怎么做的 先来自dubbo官方文档: http://dubbo.apache.org/ 网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。 单一应用架构一台服务器,一个ORM 1当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。 垂直应用架构增加了几台服务器,变为了SpingMVC 1当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。 分布式服务架构但是服务器不能无限增加啊(要钱的说),老板就让技术老大想办法.于是就有了核心业务提取,作为独立服务.于是服务器的增加暂停了,同样多的服务器干更多的活 1当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。 流动计算架构这部分还没具体接触😂,后面再写…等待更新… 1当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。 优点连通性、健壮性、伸缩性、未来架构的升级。 再有就是看下图:直接将上面的最基本的问题解决 1将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阀值，记录此时的访问量，再以此访问量乘以机器数反推总容量。 架构不说其他的,先看图 说明解释 服务容器负责启动，加载，运行服务提供者。 服务提供者在启动时，向注册中心注册自己提供的服务。 服务消费者在启动时，向注册中心订阅自己所需的服务。 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。]]></content>
      <categories>
        <category>技术</category>
        <category>doubbo</category>
      </categories>
      <tags>
        <tag>后端,dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[怎么说]]></title>
    <url>%2F2018%2F06%2F11%2F%E6%80%8E%E4%B9%88%E8%AF%B4%2F</url>
    <content type="text"><![CDATA[嘿,姑娘你的男盆友掉了]]></content>
      <categories>
        <category>杂文,随手</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[time]]></title>
    <url>%2F2018%2F06%2F10%2Ftime%2F</url>
    <content type="text"><![CDATA[虽然是时间,但是钱 一首歌 Money is not evil by itself钱本身无罪Its just paper with perceived value to obtain other things we value in other ways钱只是商品流通的交换介质，只是一张纸If not money – what is evil you may ask?那你会问，什么是邪恶？Evil is the unquenchable, obsessive and moral bending desire for more邪恶是上瘾的道德扭曲的欲望Evil is the bottomless, soulless and obsessive-compulsive pursuit of some pot of gold是强迫自己无休止地觊觎at the end of some rainbow which doesn’t exist那些并不存在的梦幻Evil is having a price tag for your heart and soul in exchange for financial success at any cost邪恶是你内心不惜一切代价获取经济利益的价格标签Evil is trying to buy happiness, again and again是贪得无厌，索取幸福until all of those fake, short lived mirages of emotions are gone直到那些虚幻的蜃景消逝Make more time让时间更有意义I’m not saying you can’t be financially successful我并不是说你不能在经济上取得成功I’m saying have a greater purpose in life well beyond the pursuit of financial success我是说有一个伟大的生活目标会超越经济方面的成功Your soul is screaming for you to answer your true calling你的灵魂在尖叫着等你最真切的回应You can change today if you redefine what success is to you如果你重新定义成功，你可能改变自己的现状You can transform your damaged relationships and build new ones你可能改善并重新建立你的人际关系You can forgive yourself and others who’ve hurt you你可能原谅自己和伤害过你的人You can become a leader by mentoring with others who you aspire to be like在你仰慕的人的指导下你也可能成为一个领导You can re-balance your priorities in life你可以重新调整生活的重心You can heal your marriage and recreate a stronger love than you ever thought possible你可以治愈你的婚姻并重建真爱You can become the best parent possible at any age – even 86你在任何年纪都能成为最好的父母，甚至在86岁but don’t wait until then…但千万别等到那时You will always be able to make more money你将来可能会赚很多钱But you cannot make more time却得不到更多时间]]></content>
      <categories>
        <category>杂文,随手</category>
      </categories>
      <tags>
        <tag>歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好,世界]]></title>
    <url>%2F2018%2F06%2F10%2F%E4%BD%A0%E5%A5%BD%2C%E4%B8%96%E7%95%8C%2F</url>
    <content type="text"><![CDATA[难得第一次搭建这个blog,对于我很难,因为很多前端内容不熟悉 但是我仍然成功了~]]></content>
      <categories>
        <category>杂文,随手</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
</search>
